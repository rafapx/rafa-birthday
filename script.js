// Elementos do DOM
const startButton = document.getElementById('start-button');
const buttonSound = document.getElementById('button-sound');
const initialMusic = document.getElementById('initial-music');
const loadingText = document.getElementById('loading-text');
const progressBar = document.querySelector('.progress-bar');
const screens = document.querySelectorAll('.screen');

// Mensagens de carregamento
const loadingMessages = [
    "Iniciando sistemas...",
    "Carregando sorrisos...",
    "Preparando diversÃ£o...",
    "Maximizando alegria...",
    "Ativando modo festa...",
    "Calibrando nÃ­veis de empolgaÃ§Ã£o...",
    "Sincronizando bom humor...",
    "Otimizando felicidade...",
    "Configurando comemoraÃ§Ãµes...",
    "Amplificando energia positiva...",
    "Carregando memÃ³rias especiais...",
    "Iniciando protocolo de festa...",
    "Ativando sistema de diversÃ£o...",
    "Preparando surpresas...",
    "Finalizando configuraÃ§Ãµes..."
];

// Controle de Ã¡udio
let isMusicPlaying = false;

// FunÃ§Ã£o para trocar de tela
function showScreen(screenIndex) {
    screens.forEach(screen => screen.classList.remove('active'));
    screens[screenIndex].classList.add('active');
}

// FunÃ§Ã£o para atualizar a barra de progresso
function updateProgressBar(progress) {
    progressBar.style.width = `${progress}%`;
}

// FunÃ§Ã£o para atualizar o texto de carregamento
function updateLoadingText(text) {
    loadingText.textContent = text;
}

// FunÃ§Ã£o para iniciar a sequÃªncia de carregamento
function startLoadingSequence() {
    let progress = 0;
    let messageIndex = 0;
    const totalTime = 18000; // 18 segundos
    const messageInterval = 1200; // 1.2 segundos por mensagem
    const progressInterval = 50; // AtualizaÃ§Ã£o da barra a cada 50ms

    // Intervalo para mensagens
    const messageTimer = setInterval(() => {
        if (messageIndex < loadingMessages.length) {
            updateLoadingText(loadingMessages[messageIndex]);
            messageIndex++;
        }
    }, messageInterval);

    // Intervalo para barra de progresso
    const progressTimer = setInterval(() => {
        progress += (100 * progressInterval) / totalTime;
        if (progress >= 100) {
            progress = 100;
            clearInterval(progressTimer);
            clearInterval(messageTimer);
            setTimeout(() => {
                showScreen(2); // Mostrar tela final
                updateCountdown(); // Iniciar contagem regressiva
            }, 500);
        }
        updateProgressBar(progress);
    }, progressInterval);
}

// FunÃ§Ã£o para formatar nÃºmero com zero Ã  esquerda
function padNumber(number) {
    return number.toString().padStart(2, '0');
}

// FunÃ§Ã£o para atualizar a contagem regressiva
function updateCountdown() {
    const targetDate = new Date('2024-11-30T12:00:00');
    
    function update() {
        const now = new Date();
        const difference = targetDate - now;

        if (difference > 0) {
            const days = Math.floor(difference / (1000 * 60 * 60 * 24));
            const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((difference % (1000 * 60)) / 1000);

            document.getElementById('countdown-timer').textContent = 
                `${padNumber(days)}D ${padNumber(hours)}H ${padNumber(minutes)}M ${padNumber(seconds)}S`;
        } else {
            document.getElementById('countdown-timer').textContent = "FESTA INICIADA! ðŸŽ‰";
        }
    }

    update();
    setInterval(update, 1000);
}

// Event Listeners
startButton.addEventListener('click', () => {
    buttonSound.play();
    showScreen(1); // Mostrar tela de carregamento
    startLoadingSequence();
    
    // Iniciar mÃºsica com volume baixo
    if (!isMusicPlaying) {
        initialMusic.volume = 0.3; // 30% do volume
        initialMusic.play();
        isMusicPlaying = true;
    }
});

// BotÃ£o de som (opcional, pode ser adicionado no HTML)
document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.createElement('button');
    toggleButton.innerHTML = 'ðŸ”Š';
    toggleButton.style.position = 'fixed';
    toggleButton.style.bottom = '20px';
    toggleButton.style.right = '20px';
    toggleButton.style.zIndex = '1000';
    toggleButton.style.background = 'none';
    toggleButton.style.border = 'none';
    toggleButton.style.fontSize = '24px';
    toggleButton.style.cursor = 'pointer';
    toggleButton.style.color = '#00ff00';
    
    document.body.appendChild(toggleButton);
    
    toggleButton.addEventListener('click', () => {
        if (initialMusic.paused) {
            initialMusic.play();
            toggleButton.innerHTML = 'ðŸ”Š';
        } else {
            initialMusic.pause();
            toggleButton.innerHTML = 'ðŸ”ˆ';
        }
    });
});
